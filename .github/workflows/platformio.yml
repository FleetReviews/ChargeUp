name: Build/Release OpenEVSE

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - ci_updates
  pull_request:

jobs:
  build_platform_io:
    name: Build using PlatformIO
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
#          - env: openevse_1-6-14
#            python: 2.x
#            platformio: 4.3.4
#          - env: openevse_1-6-17
#            python: 2.x
#            platformio: 4.3.4
          - env: openevse_1-6-23
            python: 3.x
            platformio: 5.2.3
          - env: openevse_latest
            python: 3.x
            platformio: 5.2.3
          - env: openevse
            python: 3.x
            platformio: 5.2.3
          - env: openevse_eu
            python: 3.x
            platformio: 5.2.3
          - env: emonevse
            python: 3.x
            platformio: 5.2.3
          - env: emonevse_3ph
            python: 3.x
            platformio: 5.2.3

    steps:
    - uses: actions/checkout@v2

#    - name: Cache pip
#      uses: actions/cache@v2
#      with:
#        path: ~/.cache/pip
#        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-pip-

#    - name: Cache PlatformIO
#      uses: actions/cache@v2
#      with:
#        path: ~/.platformio
#        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '${{ matrix.python }}'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio==${{ matrix.platformio }}

    - name: Run PlatformIO
      run: pio run -e ${{ matrix.env }}

    - name: Get compiler and output info
      run: |
        TOOLCHAIN=~/.platformio/packages/toolchain-atmelavr
        AVR_CORE_DIR=~/.platformio/packages/framework-arduinoavr
        ELF=.pio/build/${{ matrix.env }}/firmware.hex
        HEX=.pio/build/${{ matrix.env }}/firmware.hex

        ARDUINO_VERSION=$(grep version= $AVR_CORE_DIR/platform.txt | cut -f2 -d=)
        GCC_VERSION=$($TOOLCHAIN/bin/avr-gcc --version | head -n 1)
        HEX_SIZE=$(ls -l $HEX | awk '{ print $5 }')

        echo
        echo "Arduino AVR Version: $ARDUINO_VERSION"
        echo "GCC Version: $GCC_VERSION"
        echo "Binary Size: $HEX_SIZE"
        echo
        $TOOLCHAIN/bin/avr-size $ELF

    - name: Upload output to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.env }}
        path: .pio/build/${{ matrix.env }}/firmware.hex

  release:
    runs-on: ubuntu-latest
    needs: build_platform_io
    if: github.ref == 'refs/heads/ci_updates'

    steps:
    - name: Download the built assets
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Rename images to something more sensible
      run: |
        find artifacts -name 'firmware.hex' | while read -r image; do
          dir=$(dirname "${image}")
          board=$(basename "${dir}")
          echo mv "$image" "$board.hex"
          mv "$image" "$board"
        done

    - name: Upload assets to latest release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          *.hex
 